Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/asyncio/base_events.py", line 721, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
import plotly.express as px

# Load and filter the dataset
df = pd.read_csv('graph123.csv')

# Filter for years 2018 to 2023 and drop invalid rows
df = df[(df['Year'] >= 2018) & (df['Year'] <= 2023)]
df = df.drop(columns=['ID', 'Case Number'], errors='ignore')
df = df.dropna(subset=['Primary Type'])
df['Primary Type'] = df['Primary Type'].astype(str)

# Compute counts per year and crime type
yearly_counts = df.groupby(['Year', 'Primary Type']).size().reset_index(name='Count')

# Calculate total crimes per year
total_per_year = yearly_counts.groupby('Year')['Count'].sum().reset_index(name='Total')

# Merge to calculate percent
yearly_counts = yearly_counts.merge(total_per_year, on='Year')
yearly_counts['Percent'] = (yearly_counts['Count'] / yearly_counts['Total']) * 100

# Get top-3 crimes per year
top3 = (
    yearly_counts.sort_values(['Year', 'Count'], ascending=[True, False])
    .groupby('Year')
    .head(3)
)

# Plot using Plotly
fig = px.bar(
    top3,
    x='Year',
    y='Percent',
    color='Primary Type',
    barmode='group',
    title='Top 3 Crime Types per Year (2018â€“2023)',
    labels={'Primary Type': 'Crime Type', 'Percent': 'Percentage'},
    text=top3['Percent'].round(1).astype(str) + '%'
)

fig.update_layout(
    xaxis=dict(type='category'),
    title_font=dict(size=20),
    legend_title_text='Crime Type',
    yaxis_title='Percentage of Total Crimes',
    bargap=0.2
)

fig.update_traces(textposition='outside')

fig.write_html("_static/my_donut_plot.html")  # for interactive plot



------------------


[31m---------------------------------------------------------------------------[39m
[31mFileNotFoundError[39m                         Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[1][39m[32m, line 52[39m
[32m     42[39m fig.update_layout(
[32m     43[39m     xaxis=[38;5;28mdict[39m([38;5;28mtype[39m=[33m'[39m[33mcategory[39m[33m'[39m),
[32m     44[39m     title_font=[38;5;28mdict[39m(size=[32m20[39m),
[32m   (...)[39m[32m     47[39m     bargap=[32m0.2[39m
[32m     48[39m )
[32m     50[39m fig.update_traces(textposition=[33m'[39m[33moutside[39m[33m'[39m)
[32m---> [39m[32m52[39m [43mfig[49m[43m.[49m[43mwrite_html[49m[43m([49m[33;43m"[39;49m[33;43m_static/my_donut_plot.html[39;49m[33;43m"[39;49m[43m)[49m  [38;5;66;03m# for interactive plot[39;00m

[36mFile [39m[32m/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/plotly/basedatatypes.py:3728[39m, in [36mBaseFigure.write_html[39m[34m(self, *args, **kwargs)[39m
[32m   3625[39m [38;5;250m[39m[33;03m"""[39;00m
[32m   3626[39m [33;03mWrite a figure to an HTML file representation[39;00m
[32m   3627[39m 
[32m   (...)[39m[32m   3724[39m [33;03mNone[39;00m
[32m   3725[39m [33;03m"""[39;00m
[32m   3726[39m [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mplotly[39;00m[34;01m.[39;00m[34;01mio[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[34;01mpio[39;00m
[32m-> [39m[32m3728[39m [38;5;28;01mreturn[39;00m [43mpio[49m[43m.[49m[43mwrite_html[49m[43m([49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43m*[49m[43margs[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwargs[49m[43m)[49m

[36mFile [39m[32m/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/plotly/io/_html.py:508[39m, in [36mwrite_html[39m[34m(fig, file, config, auto_play, include_plotlyjs, include_mathjax, post_script, full_html, animation_opts, validate, default_width, default_height, auto_open, div_id)[39m
[32m    505[39m [38;5;66;03m# Write HTML string[39;00m
[32m    506[39m [38;5;28;01mif[39;00m path [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[32m    507[39m     [38;5;66;03m# To use a different file encoding, pass a file descriptor[39;00m
[32m--> [39m[32m508[39m     [43mpath[49m[43m.[49m[43mwrite_text[49m[43m([49m[43mhtml_str[49m[43m,[49m[43m [49m[33;43m"[39;49m[33;43mutf-8[39;49m[33;43m"[39;49m[43m)[49m
[32m    509[39m [38;5;28;01melse[39;00m:
[32m    510[39m     file.write(html_str)

[36mFile [39m[32m/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/pathlib/_local.py:555[39m, in [36mPath.write_text[39m[34m(self, data, encoding, errors, newline)[39m
[32m    552[39m [38;5;66;03m# Call io.text_encoding() here to ensure any warning is raised at an[39;00m
[32m    553[39m [38;5;66;03m# appropriate stack level.[39;00m
[32m    554[39m encoding = io.text_encoding(encoding)
[32m--> [39m[32m555[39m [38;5;28;01mreturn[39;00m [43mPathBase[49m[43m.[49m[43mwrite_text[49m[43m([49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43mdata[49m[43m,[49m[43m [49m[43mencoding[49m[43m,[49m[43m [49m[43merrors[49m[43m,[49m[43m [49m[43mnewline[49m[43m)[49m

[36mFile [39m[32m/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/pathlib/_abc.py:651[39m, in [36mPathBase.write_text[39m[34m(self, data, encoding, errors, newline)[39m
[32m    648[39m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28misinstance[39m(data, [38;5;28mstr[39m):
[32m    649[39m     [38;5;28;01mraise[39;00m [38;5;167;01mTypeError[39;00m([33m'[39m[33mdata must be str, not [39m[38;5;132;01m%s[39;00m[33m'[39m %
[32m    650[39m                     data.[34m__class__[39m.[34m__name__[39m)
[32m--> [39m[32m651[39m [38;5;28;01mwith[39;00m [38;5;28;43mself[39;49m[43m.[49m[43mopen[49m[43m([49m[43mmode[49m[43m=[49m[33;43m'[39;49m[33;43mw[39;49m[33;43m'[39;49m[43m,[49m[43m [49m[43mencoding[49m[43m=[49m[43mencoding[49m[43m,[49m[43m [49m[43merrors[49m[43m=[49m[43merrors[49m[43m,[49m[43m [49m[43mnewline[49m[43m=[49m[43mnewline[49m[43m)[49m [38;5;28;01mas[39;00m f:
[32m    652[39m     [38;5;28;01mreturn[39;00m f.write(data)

[36mFile [39m[32m/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/pathlib/_local.py:537[39m, in [36mPath.open[39m[34m(self, mode, buffering, encoding, errors, newline)[39m
[32m    535[39m [38;5;28;01mif[39;00m [33m"[39m[33mb[39m[33m"[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m mode:
[32m    536[39m     encoding = io.text_encoding(encoding)
[32m--> [39m[32m537[39m [38;5;28;01mreturn[39;00m [43mio[49m[43m.[49m[43mopen[49m[43m([49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43mmode[49m[43m,[49m[43m [49m[43mbuffering[49m[43m,[49m[43m [49m[43mencoding[49m[43m,[49m[43m [49m[43merrors[49m[43m,[49m[43m [49m[43mnewline[49m[43m)[49m

[31mFileNotFoundError[39m: [Errno 2] No such file or directory: '_static/my_donut_plot.html'

